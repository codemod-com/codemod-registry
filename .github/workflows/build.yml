name: build
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
jobs:
    Build:
        runs-on: ubuntu-latest
        steps:
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16
            - name: Checkout Repository
              uses: actions/checkout@v2
              with:
                  token: ${{ secrets.GH_TOKEN }}
            - name: Install modules
              uses: pnpm/action-setup@v2
              with:
                  version: 8
            - name: Install dependencies
              run: pnpm install
            - name: Build the CJS files
              run: pnpm build
            - name: Fetch top commit from website repository
              run: |
                  git remote add website https://github.com/intuita-inc/website.git
                  git fetch website master
            - name: Push commit to master in website repository
              run: |
                  git config --local user.email "intuita@intuita.io"
                  git config --local user.name "Intuita Team"
                  # Get the current branch name
                  current_branch=$(git rev-parse --abbrev-ref HEAD)  
                  echo "Current Branch: $current_branch"
                  # Fetch changes from origin main
                  git fetch origin main  
                  # Specify a common commit as the merge base
                  merge_base_commit=$(git merge-base origin/main HEAD)  
                  # Print some debugging information
                  echo "Current Branch: $current_branch"
                  echo "Merge Base Commit: $merge_base_commit"  
                  # Merge with the allow-unrelated-histories option
                  git merge --allow-unrelated-histories $merge_base_commit  
                  # Print the output and error messages of the merge command
                  merge_exit_code=$?
                  echo "Merge Exit Code: $merge_exit_code"
                  git show -s --pretty=format:"%s" HEAD  
                  # Get the diff between the merge base and the current branch
                  changed_files=$(git diff --name-only $merge_base_commit HEAD)
                  echo "Changed Files:"
                  echo "$changed_files"

                  # Filter for README files in the 'codemods' directory
                  readme_files=$(echo "$changed_files" | grep '^codemods/.*README\.md$')

                  if [ -z "$readme_files" ]; then
                      echo "No README.md file in 'codemods' directory changed."
                      exit 0
                  fi

                  # Prepare to store parsed README contents and paths
                  declare -A parsed_readmes
                  pnpm --filter @codemod-registry/readme-parser build

                  # Iterate over the filtered README files
                  while IFS= read -r path_to_readme; do
                      generated_slug=$(echo "$path_to_readme" | sed 's/^[^/]*\///' | sed 's/\/README\.md$//' | tr '/' '-')
                      website_file_path="cms/automations/$generated_slug.md"
                      
                      # Parse the README and store the output with its path
                      parsed_readme=$("$PWD"/readme-parser/dist/index.js "$path_to_readme")
                      parsed_readmes["$website_file_path"]="$parsed_readme"
                  done <<< "$readme_files"

                  # Checkout a new branch from the website master
                  git checkout -b update-codemods website/master

                  # Iterate over parsed_readmes and create files
                  for website_file_path in "${!parsed_readmes[@]}"; do
                      echo "${parsed_readmes[$website_file_path]}"
                      echo $(git status)
                      echo "${parsed_readmes[$website_file_path]}" > "$website_file_path"
                      git add "$website_file_path"
                      echo $(ls "$website_file_path" -la)
                  done

                  # Commit and push all changes at once
                  git commit -m "Synced registry codemods"
                  git push website HEAD:master
            - name: Upload to S3
              uses: jakejarvis/s3-sync-action@master
              with:
                  args: --acl public-read --follow-symlinks
              env:
                  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_REGION: 'us-west-1'
                  DEST_DIR: 'codemod-registry'
                  SOURCE_DIR: 'builder/dist'
